name: Tests

# event that triggers workflow
# runs on every commit
on: 
  push:

jobs:
  linting-and-testing:
    # specifies the os that the job will run on 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.13]
    steps:
    # downloads the repository code to the runner's file system for workflow access
    - uses: actions/checkout@v4

    # sets up python environment with specified versions 
    - name: Set up python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # installs poetry and configures it
    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    # loads cached venv if it exists
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}

    # install dependencies if cache not available
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --extras "sil" --with dev

    # install library
    - name: Install root project
      run: poetry install --no-interaction --extras "sil" --with dev 

    # type checking
    - name: Run type checker
      run: poetry run mypy vessim

    # linting
    - name: Run linter
      run: poetry run ruff check vessim

    # unit-testing
    - name: Run tests
      run: poetry run python -m pytest