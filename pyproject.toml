[tool.black]
# Set the maximum characters per line
line-length = 90

# Set python version that black should format the code for
target-version = ['py311']

# Format only python files
include = '\.py$'


[tool.ruff]
# Enable Ruff to check for docstring-related (D), pycodestyle-related (E, W), and Pyflakes-related (F) issues
select = ["D", "E", "F", "W"]

# For now the following rules are disabled:
#   D100: Missing docstring in public module
#   D101: Missing docstring in public class
#   D102: Missing docstring in public method
#   D103: Missing docstring in public function
#   D107: Missing docstring in __init__
#   F401: Imported but unused

ignore = ["D100", "D101", "D102", "D103", "D107", "F401"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["D", "E", "W"]
unfixable = ["F"]

# Set the maximum characters per line (similar to black)
line-length = 90

# Set python version for linting (similar to black)
target-version = "py311"

# Only enable linting for python files (similar to black)
include = ["*.py"]

# Exclude specific directories and all defaults
extend-exclude = ["example_node", "simulator/power_meter.py", "carbon-aware_control_unit"]

# Configure Ruff to enforce Google-style docstrings when checking documentation
[tool.ruff.pydocstyle]
convention = "google"
