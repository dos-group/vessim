[project]
name = "vessim"
dynamic = ["version"]
description = "A simulator for carbon-aware applications and systems."
keywords = ["simulation", "energy system", "testbed", "carbon-aware computing", "software-in-the-loop"]
authors = [
    {name = "Philipp Wiesner", email = "wiesner@tu-berlin.de"}
]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/dos-group/vessim"
repository = "https://github.com/dos-group/vessim"
documentation = "https://github.com/dos-group/vessim"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Testing",
    "Topic :: Education",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
]
requires-python = ">=3.9,<3.14"
dependencies = [
    "numpy>=1.22.0; python_version < '3.12'",
    "numpy>=1.26.0; python_version >= '3.12'",
    "pandas>=2.0.0",
    "mosaik>=3.3.0",
    "mosaik-api-v3>=3.0.4",
    "loguru>=0.6.0",
    "docopt-ng>=0.6.2",
]

[project.optional-dependencies]
sil = [
    "requests>=2.26.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.23.0",
]
dev = [
    "pytest",
    "mypy",
    "types-psutil",
    "pandas-stubs",
    "types-requests",
    "black",
    "ruff",
]
docs = [
    "setuptools",
    "sphinx",
    "furo",
    "sphinx-copybutton",
    "nbsphinx",
    "pandoc",
    "ipython",
    "matplotlib",
    "windpowerlib",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["vessim"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
source = "vcs"

[tool.black]
line-length = 99  # Set the maximum characters per line
target-version = ['py38']   # Set python versions that black should format the code for
include = '\.py$'  # Format only python files

[tool.ruff]
line-length = 99  # Set the maximum characters per line (similar to black)
target-version = "py38"  # Set python version for linting (similar to black)
include = ["*.py"]  # Only enable linting for python files (similar to black)

[tool.ruff.lint]
# Enable Ruff to check for issues (https://beta.ruff.rs/docs/rules)
select = [
  "E", "W",  # pycodestyle (error and warning)
  "D",  # docstrings
  "F",  # Pyflakes
  "N",  # variable naming
  #  "B",  # flake8-bugbear
]

# For now the following rules are disabled:
#   D100: Missing docstring in public module
#   D101: Missing docstring in public class
#   D102: Missing docstring in public method
#   D103: Missing docstring in public function
#   D107: Missing docstring in __init__
ignore = ["D100", "D101", "D102", "D103", "D107", "E722"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["D", "E", "W"]
unfixable = ["F"]

[tool.ruff.lint.pydocstyle]
# Configure Ruff to enforce Google-style docstrings when checking documentation
convention = "google"

# Configure mypy to ignore missing imports
[mypy]
ignore_missing_imports = true

[tool.pytest.ini_options]
filterwarnings = [
    "error",
    # https://github.com/dateutil/dateutil/issues/1314
    "ignore:datetime.datetime.utcfromtimestamp:DeprecationWarning:dateutil.tz.tz",
]